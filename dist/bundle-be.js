!function(e){function r(e){var r=require("./"+e+"."+o+".hot-update.js");!function(e,r){if(!b[e]||!g[e])return;for(var t in g[e]=!1,r)Object.prototype.hasOwnProperty.call(r,t)&&(f[t]=r[t]);0==--y&&0===m&&E()}(r.id,r.modules)}var t,n=!0,o="53044c5143cf53b87eb9",s={},i=[],c=[];function a(e){var r=A[e];if(!r)return I;var n=function(n){return r.hot.active?(A[n]?-1===A[n].parents.indexOf(e)&&A[n].parents.push(e):(i=[e],t=n),-1===r.children.indexOf(n)&&r.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),i=[]),I(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(r){I[e]=r}}};for(var s in I)Object.prototype.hasOwnProperty.call(I,s)&&"e"!==s&&"t"!==s&&Object.defineProperty(n,s,o(s));return n.e=function(e){return"ready"===l&&u("prepare"),m++,I.e(e).then(r,function(e){throw r(),e});function r(){m--,"prepare"===l&&(w[e]||_(e),0===m&&0===y&&E())}},n.t=function(e,r){return 1&r&&(e=n(e)),I.t(e,-2&r)},n}var d=[],l="idle";function u(e){l=e;for(var r=0;r<d.length;r++)d[r].call(null,e)}var p,f,h,v,y=0,m=0,w={},g={},b={};function x(e){return+e+""===e?+e:e}function O(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return n=e,u("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return u(P()?"ready":"idle"),null;g={},w={},b=e.c,h=e.h,u("prepare");var r=new Promise(function(e,r){p={resolve:e,reject:r}});f={};return _(0),"prepare"===l&&0===m&&0===y&&E(),r})}function _(e){b[e]?(g[e]=!0,y++,r(e)):w[e]=!0}function E(){u("ready");var e=p;if(p=null,e)if(n)Promise.resolve().then(function(){return j(n)}).then(function(r){e.resolve(r)},function(r){e.reject(r)});else{var r=[];for(var t in f)Object.prototype.hasOwnProperty.call(f,t)&&r.push(x(t));e.resolve(r)}}function j(r){if("ready"!==l)throw new Error("apply() is only allowed in ready status");return function r(n){P();var c;var a;var d;var l;var p;function y(e){for(var r=[e],t={},n=r.map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),s=o.id,i=o.chain;if((l=A[s])&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(l.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var c=0;c<l.parents.length;c++){var a=l.parents[c],d=A[a];if(d){if(d.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([a]),moduleId:s,parentId:a};-1===r.indexOf(a)&&(d.hot._acceptedDependencies[s]?(t[a]||(t[a]=[]),m(t[a],[s])):(delete t[a],r.push(a),n.push({chain:i.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function m(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}var w={};var g=[];var O={};var _=function(){console.warn("[HMR] unexpected require("+j.moduleId+") to disposed module")};for(var E in f)if(Object.prototype.hasOwnProperty.call(f,E)){var j;p=x(E);var D=!1,k=!1,q=!1,H="";switch((j=f[E]?y(p):{type:"disposed",moduleId:E}).chain&&(H="\nUpdate propagation: "+j.chain.join(" -> ")),j.type){case"self-declined":n.onDeclined&&n.onDeclined(j),n.ignoreDeclined||(D=new Error("Aborted because of self decline: "+j.moduleId+H));break;case"declined":n.onDeclined&&n.onDeclined(j),n.ignoreDeclined||(D=new Error("Aborted because of declined dependency: "+j.moduleId+" in "+j.parentId+H));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(j),n.ignoreUnaccepted||(D=new Error("Aborted because "+p+" is not accepted"+H));break;case"accepted":n.onAccepted&&n.onAccepted(j),k=!0;break;case"disposed":n.onDisposed&&n.onDisposed(j),q=!0;break;default:throw new Error("Unexception type "+j.type)}if(D)return u("abort"),Promise.reject(D);if(k)for(p in O[p]=f[p],m(g,j.outdatedModules),j.outdatedDependencies)Object.prototype.hasOwnProperty.call(j.outdatedDependencies,p)&&(w[p]||(w[p]=[]),m(w[p],j.outdatedDependencies[p]));q&&(m(g,[j.moduleId]),O[p]=_)}var S=[];for(a=0;a<g.length;a++)p=g[a],A[p]&&A[p].hot._selfAccepted&&O[p]!==_&&!A[p].hot._selfInvalidated&&S.push({module:p,parents:A[p].parents.slice(),errorHandler:A[p].hot._selfAccepted});u("dispose");Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});var C;var R=g.slice();for(;R.length>0;)if(p=R.pop(),l=A[p]){var T={},M=l.hot._disposeHandlers;for(d=0;d<M.length;d++)(c=M[d])(T);for(s[p]=T,l.hot.active=!1,delete A[p],delete w[p],d=0;d<l.children.length;d++){var U=A[l.children[d]];U&&((C=U.parents.indexOf(p))>=0&&U.parents.splice(C,1))}}var L;var N;for(p in w)if(Object.prototype.hasOwnProperty.call(w,p)&&(l=A[p]))for(N=w[p],d=0;d<N.length;d++)L=N[d],(C=l.children.indexOf(L))>=0&&l.children.splice(C,1);u("apply");void 0!==h&&(o=h,h=void 0);f=void 0;for(p in O)Object.prototype.hasOwnProperty.call(O,p)&&(e[p]=O[p]);var G=null;for(p in w)if(Object.prototype.hasOwnProperty.call(w,p)&&(l=A[p])){N=w[p];var J=[];for(a=0;a<N.length;a++)if(L=N[a],c=l.hot._acceptedDependencies[L]){if(-1!==J.indexOf(c))continue;J.push(c)}for(a=0;a<J.length;a++){c=J[a];try{c(N)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:p,dependencyId:N[a],error:e}),n.ignoreErrored||G||(G=e)}}}for(a=0;a<S.length;a++){var $=S[a];p=$.module,i=$.parents,t=p;try{I(p)}catch(e){if("function"==typeof $.errorHandler)try{$.errorHandler(e)}catch(r){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:p,error:r,originalError:e}),n.ignoreErrored||G||(G=r),G||(G=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:p,error:e}),n.ignoreErrored||G||(G=e)}}if(G)return u("fail"),Promise.reject(G);if(v)return r(n).then(function(e){return g.forEach(function(r){e.indexOf(r)<0&&e.push(r)}),e});u("idle");return new Promise(function(e){e(g)})}(r=r||{})}function P(){if(v)return f||(f={}),v.forEach(D),v=void 0,!0}function D(r){Object.prototype.hasOwnProperty.call(f,r)||(f[r]=e[r])}var A={};function I(r){if(A[r])return A[r].exports;var n=A[r]={i:r,l:!1,exports:{},hot:function(r){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:t!==r,active:!0,accept:function(e,r){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._acceptedDependencies[e[t]]=r||function(){};else n._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._declinedDependencies[e[r]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=n._disposeHandlers.indexOf(e);r>=0&&n._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":(f={})[r]=e[r],u("ready");break;case"ready":D(r);break;case"prepare":case"check":case"dispose":case"apply":(v=v||[]).push(r)}},check:O,apply:j,status:function(e){if(!e)return l;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var r=d.indexOf(e);r>=0&&d.splice(r,1)},data:s[r]};return t=void 0,n}(r),parents:(c=i,i=[],c),children:[]};return e[r].call(n.exports,n,n.exports,a(r)),n.l=!0,n.exports}I.m=e,I.c=A,I.d=function(e,r,t){I.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:t})},I.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},I.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(r,"a",r),r},I.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},I.p="/Users/muhammadhutaib/Documents/GitHub/login/dist",I.w={},I.h=function(){return o},a(13)(I.s=13)}([function(e,r){e.exports=require("mariadb")},function(e,r){e.exports=require("password-hash")},function(e,r){e.exports=require("jsonwebtoken")},function(e,r){e.exports=require("passport-jwt")},function(e,r){e.exports=require("passport")},function(e,r){e.exports=require("body-parser")},function(e,r){e.exports=require("morgan")},function(e,r){e.exports=require("express")},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(7),o=t(6),s=t(5),i=t(4),c=t(3),a=t(2),d=t(1);let l=t(0);r.default=(new class{constructor(){this.jwtOptions={},this.ExtractJwt=c.ExtractJwt,this.JwtStrategy=c.ExtractJwt,this.newdata=[],this.jwtOptions.jwtFromRequest=this.ExtractJwt.fromAuthHeaderAsBearerToken(),this.jwtOptions.secretOrKey="SECRET",this.connectionString={host:"localhost",user:"root",password:"gymhw6xf",database:"LOGIN",connectionLimit:5,port:"3306",ssl:!1,allowPublicKeyRetrieval:!0},this.pool=l.createPool(this.connectionString),console.log(this.connectionString),this.express=n(),this.middleware(),this.routes()}ensureToken(e,r,t){const n=e.headers.authorization;if(void 0!==n){const r=n.split(" ")[1];e.token=r,t()}else r.sendStatus(403)}middleware(){this.express.use(function(e,r,t){r.header("Access-Control-Allow-Origin","*"),r.header("Access-Control-Allow-Headers","X-Requested-With,content-type"),r.header("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),t()}),this.express.use(o("dev")),this.express.use(s.json()),this.express.use(i.initialize()),this.express.use(s.urlencoded({extended:!1}))}routes(){let e=n.Router();e.post("/login",(e,r,t)=>{this.pool.getConnection().then(t=>{t.query("SELECT * FROM LOGIN.login WHERE username=?",[e.body.username]).then(n=>{const o=Array.isArray(n)?n.slice(0,-1):n;console.log(o,"data"),0==n.length?(t.end(),r.status(401).json({message:"Please signup, no email exists"})):d.verify(e.body.password,n[0].password)?(t.end(),console.log("SECRET"),n={data:n},r.json({sucessful:!0,token:a.sign(n,"SECRET")})):(t.end(),r.status(401).json({message:"Password/Email did not match"}))}).catch(e=>{t.end(),e&&(r.status(404).json({err:e}),console.log(e))})}).catch(e=>{e&&(r.status(404).json({err:e}),console.log(e))})}),e.post("/createUser",(e,r,t)=>{this.newdata=[],this.pool.getConnection().then(t=>{t.query("insert into LOGIN.login (last_name, first_name, email_address, password, username) VALUES (?, ?, ?, ?, ?)",[e.body.last_name,e.body.first_name,e.body.email_address,d.generate(e.body.password),e.body.username]).then(e=>{t.end(),r.json({message:"sucessful"})}).catch(e=>{t.end(),e&&r.status(404).json({err:e})})}).catch(e=>{e&&r.status(404).json({err:e})})}),e.get("/healthz",(e,r,t)=>{r.send("success")}),this.express.use("/",e)}}).express},function(e,r){e.exports=require("debug")},function(e,r){e.exports=require("http")},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(10),o=t(9),s=t(8);o("ts-express:server");const i=function(e){let r="string"==typeof e?parseInt(e,10):e;return isNaN(r)?e:r>=0&&r}(3004);s.default.set("port",i);const c=n.createServer(s.default);c.listen(i),c.on("error",function(e){if("listen"!==e.syscall)throw e;let r="string"==typeof i?"Pipe "+i:"Port "+i;switch(e.code){case"EACCES":console.error(`${r} requires elevated privileges`),process.exit(1);break;case"EADDRINUSE":console.error(`${r} is already in use`),process.exit(1);break;default:throw e}}),c.on("listening",function(){let e=c.address(),r="string"==typeof e?`pipe ${e}`:`port ${e.port}`;o(`Listening on ${r}`)})},function(e,r){e.exports=require("@babel/polyfill")},function(e,r,t){t(12),e.exports=t(11)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,